---
import { getCollection } from "astro:content";
import "../styles/global.css";

const { exercises = [], currentBookSlug } = Astro.props;
---

<html>
  <body class="flex flex-col min-h-screen">
    <!--raya arcoiris-->
    <div class="w-full h-[4px] rainbow-bar"></div>

    <div class="flex flex-1">
      <!--sidebar-->
      <aside
        id="resizable-sidebar"
        class="relative flex flex-col bg-clip-border rounded-xl bg-[var(--pepe)] text-gray-700 w-64 min-w-[200px] max-w-[500px] p-4 shadow-xl shadow-blue-gray-900/5 sticky top-0"
      >
  <div class="mb-2 p-4">
    <h5 class="block antialiased tracking-normal font-sans text-xl font-semibold leading-snug text-gray-900">Contenido</h5>
  </div>
        <nav class="flex flex-col gap-1 p-2 font-sans lato-regular text-gray-700">
          <!-- Esto es la introduccion -->
        <a href = `#`
            class="flex items-center w-full p-3 rounded-lg text-start leading-tight transition-all hover:bg-blue-50 hover:bg-opacity-80 focus:bg-blue-50 focus:bg-opacity-80 active:bg-gray-50 active:bg-opacity-80 hover:text-blue-900 focus:text-blue-900 active:text-blue-900 outline-none"
          >
            Introduccion
          </a>

          {exercises.map((ex: { slug: string; data: { title: unknown } }) => (
            <a
              href={`/books/${currentBookSlug}/${ex.slug.split("/").pop()}`}
              class="flex items-center w-full p-3 rounded-lg text-start leading-tight transition-all hover:bg-blue-50 hover:bg-opacity-80 focus:bg-blue-50 focus:bg-opacity-80 active:bg-gray-50 active:bg-opacity-80 hover:text-blue-900 focus:text-blue-900 active:text-blue-900 outline-none"
            >
              <div class="grid place-items-center mr-4">
                <!--icono genérico para cada ejercicio-->
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  viewBox="0 0 24 24"
                  fill="currentColor"
                  class="h-5 w-5"
                >
                  <path
                    fill-rule="evenodd"
                    d="M4.5 6.75A2.25 2.25 0 016.75 4.5h10.5A2.25 2.25 0 0119.5 6.75v10.5a2.25 2.25 0 01-2.25 2.25H6.75a2.25 2.25 0 01-2.25-2.25V6.75zM6 8.25h12v1.5H6v-1.5zm0 3h12v1.5H6v-1.5zm0 3h8.25v1.5H6v-1.5z"
                    clip-rule="evenodd"
                  />
                </svg>
              </div>
              {ex.data.title}
            </a>
          ))}
        </nav>

      </aside>


 <!--  handle para redimensionar -->
      <div id="resizer" class="w-[2px] bg-gray-200 cursor-col-resize hover:bg-gray-400"></div>

      <!--index md-->
      <main class="flex-1 overflow-y-auto">
        <div class="max-w-4xl mx-auto p-8">
          <slot name="introduction" />
          <slot name="main" />
        </div>
      </main>
    </div>

<script>
  const sidebar = document.getElementById("resizable-sidebar");
  const handle = document.getElementById("resizer"); // <-- usar el id correcto

  let isResizing = false;

  handle.addEventListener("mousedown", (e) => {
    isResizing = true;
    document.body.style.cursor = "col-resize";
  });

  window.addEventListener("mousemove", (e) => {
    if (!isResizing) return;
    let newWidth = e.clientX;
    if (newWidth < 200) newWidth = 200; // mínimo
    if (newWidth > 500) newWidth = 500; // máximo
    sidebar.style.width = newWidth + "px";
  });

  window.addEventListener("mouseup", () => {
    isResizing = false;
    document.body.style.cursor = "default";
  });
</script>
  </body>
</html>

<style>
@keyframes rainbow {
  0% {
    background-position: 0% 50%;
  }
  100% {
    background-position: 200% 50%;
  }
}

.rainbow-bar {
  background: linear-gradient(
    to right,
    red,
    orange,
    yellow,
    green,
    blue,
    indigo,
    violet
  );
  background-size: 200% 200%;
  animation: rainbow 4s linear infinite;
}
</style>

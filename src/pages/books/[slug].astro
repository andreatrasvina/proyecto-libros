---
// Importa las funciones y tipos necesarios de Astro
import { getCollection, type CollectionEntry } from "astro:content";
import BookLayout from "../../layouts/BookLayout.astro";

// La función getStaticPaths le dice a Astro qué páginas generar
export async function getStaticPaths() {

  const allBooks = await getCollection("books");
  const allExercises = await getCollection("exercises");

  return allBooks.map((book: { slug: any; }) => {
    // Filtra los ejercicios para que solo se incluyan los de este libro
    const filteredExercises = allExercises.filter(
      (exercise: { data: { bookSlug: any; }; }) => exercise.data.bookSlug === book.slug,
    );
    // console.log(filteredExercises)

    return {
      params: {
        slug: book.slug,
      },
      props: {
        book,
        exercises: filteredExercises, // Pasa los ejercicios filtrados
      },
    };
  });
}

// 1. Define el tipo de la variable `book` y `exercises`
type Props = {
  book: CollectionEntry<"books">;
  exercises: CollectionEntry<"exercises">[];
};

// 2. Desestructura `book` y `exercises` de `Astro.props`
const { book, exercises = [] } = Astro.props as Props;
const { Content } = await book.render();

console.log(exercises.map(e => e.data.title));
---

<BookLayout>
  <!-- <div slot="sidebar-li">Introduccion</div> -->
  <div slot="sidebar-li">
    
    {exercises.map((exercise) => (
      <li>{exercise.data.title}</li>
    ))}
  
</div>

  <div slot="introduction">
    <h1>{book.data.title}</h1>
    <Content />

    {/* Ahora mapeamos sobre la lista de ejercicios ya filtrada */}
    {
      exercises.map((exercise) => {
        const { title, author } = exercise.data;
        return (
          <div>
            <h1>{title}</h1>
            <h1>{author}</h1>
          </div>
        );
      })
    }
  </div>
</BookLayout>
